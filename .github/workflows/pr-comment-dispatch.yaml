name: Trigger Workflows when Commenting on a PR

on:
  issue_comment:
    types: [created]
  pull_request_target:
    types: []  # included so the workflow runs in trusted context for forks

permissions:
  pull-requests: write
  contents: read
  actions: write
  issues: write  # needed for posting comments and editing comments

jobs:
  trigger-evaluate:
    if: |
      github.event_name == 'issue_comment' &&
      github.event.issue.pull_request &&
      startsWith(github.event.comment.body, '/evaluate')
    runs-on: ubuntu-latest

    steps:
      - name: Add üëÄ reaction to comment
        id: eyes
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const res = await github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: context.payload.comment.id,
              content: 'eyes'
            });
            return res.data.id;
          result-encoding: string

      - name: Parse PR info & test_type
        id: pr
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const body = context.payload.comment.body.trim();
            const parts = body.split(/\s+/);
            let testType = 'end_to_end';
            if (parts.length > 1) {
              testType = parts[1];
            }

            const prNumber = context.issue.number;
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });

            return {
              branch: pr.data.head.ref,
              number: prNumber,
              testType
            };

      - name: Trigger evaluate.yaml on main
        id: dispatch
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              const { branch, number, testType } = JSON.parse('${{ steps.pr.outputs.result }}');
              await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'evaluate.yaml',
                ref: 'main',
                inputs: {
                  compare_branch: branch,
                  pr_number: String(number),
                  test_type: testType
                }
              });
              return "success";
            } catch (error) {
              return `failure: ${error.message}`;
            }
          result-encoding: string

      - name: Replace üëÄ with üëç on successful dispatch
        if: steps.dispatch.outputs.result == 'success'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.reactions.deleteForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: context.payload.comment.id,
              reaction_id: ${{ steps.eyes.outputs.result }}
            });
            await github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: context.payload.comment.id,
              content: '+1'
            });

      - name: Replace üëÄ with üòï and edit comment on dispatch failure
        if: startsWith(steps.dispatch.outputs.result, 'failure')
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const commentId = context.payload.comment.id;
            const originalBody = context.payload.comment.body;
            const errorMsg = `${{ steps.dispatch.outputs.result }}`;

            // Construct the current workflow run URL for easy debugging
            const runUrl = `https://github.com/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}`;

            // Remove üëÄ reaction
            await github.rest.reactions.deleteForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: commentId,
              reaction_id: ${{ steps.eyes.outputs.result }}
            });

            // Add confused reaction
            await github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: commentId,
              content: 'confused'
            });

            // Append failure message with link to this workflow run
            const newBody = `${originalBody}\n\n‚ùå Failed to trigger **evaluate** workflow: ${errorMsg}\n\nYou can view details of this run [here](${runUrl}).`;

            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: commentId,
              body: newBody
            });
